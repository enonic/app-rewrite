plugins {
    id 'java'
    id 'jacoco'
    id 'maven-publish'
    id 'com.enonic.defaults' version '2.1.5'
    id 'com.enonic.xp.app' version '3.5.0'
    id "com.github.node-gradle.node" version '7.0.2'
}

app {
    name = "${appName}"
    displayName = "${appDisplayName}"
    vendorName = "${vendorName}"
    vendorUrl = "${vendorUrl}"
    systemVersion = "${xpVersion}"
}

dependencies {
    compileOnly "com.enonic.xp:core-api:${xpVersion}"
    compileOnly "com.enonic.xp:portal-api:${xpVersion}"
    compileOnly "com.enonic.xp:web-api:${xpVersion}"

    include 'org.apache.commons:commons-csv:1.11.0'

    include "com.enonic.xp:lib-content:${xpVersion}"
    include "com.enonic.xp:lib-portal:${xpVersion}"
    include "com.enonic.xp:lib-io:${xpVersion}"
    include "com.enonic.xp:lib-vhost:${xpVersion}"
    include "com.enonic.xp:lib-event:${xpVersion}"
    include 'com.enonic.lib:lib-thymeleaf:2.1.1'
    include 'com.enonic.lib:lib-license:3.1.0'

    testImplementation 'org.mockito:mockito-core:5.13.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.12.0'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.11.0'
    testImplementation "com.enonic.xp:testing:${xpVersion}"
}

repositories {
    mavenLocal()
    mavenCentral()
    xp.enonicRepo()
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
}

check.dependsOn jacocoTestReport

test {
    useJUnitPlatform()
}

node {
    download = true
    version = '20.11.0'
}

task npmInstallForce( type: NpmTask ) {
    description = 'Update all project node dependencies'
    args = ['install', '--force']
}

task cleanNode( type: org.gradle.api.tasks.Delete ) {
    delete 'node_modules'
}

task clientWebpack( type: NodeTask, dependsOn: npmInstall ) {
    environment = ['NODE_ENV': nodeEnvironment()]
    args = ['--config', 'webpack.client.config.js', '--color']
    description = 'Build UI resources (js, css, etc).'
    inputs.dir 'src/main'
    outputs.dir "${buildDir}/resources/main"
    script = file( 'node_modules/webpack-cli/bin/cli.js' )
}

processResources {
    exclude '**/src/**'
    dependsOn clientWebpack
}

def nodeEnvironment()
{
    def environments = [prod: 'production', dev: 'development']
    def nodeEnv = environments[hasProperty( 'env' ) ? env : 'prod']
    return nodeEnv != null ? nodeEnv : 'production'
}
